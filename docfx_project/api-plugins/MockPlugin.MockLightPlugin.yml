### YamlMime:ManagedReference
items:
- uid: MockPlugin.MockLightPlugin
  commentId: T:MockPlugin.MockLightPlugin
  id: MockLightPlugin
  parent: MockPlugin
  children:
  - MockPlugin.MockLightPlugin.AssemblyVersion
  - MockPlugin.MockLightPlugin.Build
  - MockPlugin.MockLightPlugin.Company
  - MockPlugin.MockLightPlugin.CreatedAt
  - MockPlugin.MockLightPlugin.HttpSupport
  - MockPlugin.MockLightPlugin.Id
  - MockPlugin.MockLightPlugin.ModifiedAt
  - MockPlugin.MockLightPlugin.MqttSupport
  - MockPlugin.MockLightPlugin.Name
  - MockPlugin.MockLightPlugin.SetRgba(System.Int32,System.Int32,System.Int32,System.Int32)
  - MockPlugin.MockLightPlugin.TurnOnOff
  langs:
  - csharp
  - vb
  name: MockLightPlugin
  nameWithType: MockLightPlugin
  fullName: MockPlugin.MockLightPlugin
  type: Class
  source:
    remote:
      path: docfx_project/src-plugins/MockPlugin/MockLightPlugin.cs
      branch: master
      repo: https://github.com/SmartHub-Io/SmartHub-Docs.git
    id: MockLightPlugin
    path: src-plugins/MockPlugin/MockLightPlugin.cs
    startLine: 7
  assemblies:
  - MockPlugin
  namespace: MockPlugin
  syntax:
    content: 'public class MockLightPlugin : IMockLightPlugin, IHttpSupport, ILight'
    content.vb: >-
      Public Class MockLightPlugin

          Implements IMockLightPlugin, IHttpSupport, ILight
  inheritance:
  - System.Object
  implements:
  - MockPlugin.IMockLightPlugin
  - IHttpSupport
  - ILight
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: MockPlugin.MockLightPlugin.Id
  commentId: P:MockPlugin.MockLightPlugin.Id
  id: Id
  parent: MockPlugin.MockLightPlugin
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: MockLightPlugin.Id
  fullName: MockPlugin.MockLightPlugin.Id
  type: Property
  source:
    remote:
      path: docfx_project/src-plugins/MockPlugin/MockLightPlugin.cs
      branch: master
      repo: https://github.com/SmartHub-Io/SmartHub-Docs.git
    id: Id
    path: src-plugins/MockPlugin/MockLightPlugin.cs
    startLine: 9
  assemblies:
  - MockPlugin
  namespace: MockPlugin
  syntax:
    content: public string Id { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Id As String
  overload: MockPlugin.MockLightPlugin.Id*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: MockPlugin.MockLightPlugin.Name
  commentId: P:MockPlugin.MockLightPlugin.Name
  id: Name
  parent: MockPlugin.MockLightPlugin
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: MockLightPlugin.Name
  fullName: MockPlugin.MockLightPlugin.Name
  type: Property
  source:
    remote:
      path: docfx_project/src-plugins/MockPlugin/MockLightPlugin.cs
      branch: master
      repo: https://github.com/SmartHub-Io/SmartHub-Docs.git
    id: Name
    path: src-plugins/MockPlugin/MockLightPlugin.cs
    startLine: 10
  assemblies:
  - MockPlugin
  namespace: MockPlugin
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: MockPlugin.MockLightPlugin.Name*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: MockPlugin.MockLightPlugin.Company
  commentId: P:MockPlugin.MockLightPlugin.Company
  id: Company
  parent: MockPlugin.MockLightPlugin
  langs:
  - csharp
  - vb
  name: Company
  nameWithType: MockLightPlugin.Company
  fullName: MockPlugin.MockLightPlugin.Company
  type: Property
  source:
    remote:
      path: docfx_project/src-plugins/MockPlugin/MockLightPlugin.cs
      branch: master
      repo: https://github.com/SmartHub-Io/SmartHub-Docs.git
    id: Company
    path: src-plugins/MockPlugin/MockLightPlugin.cs
    startLine: 11
  assemblies:
  - MockPlugin
  namespace: MockPlugin
  syntax:
    content: public string Company { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Company As String
  overload: MockPlugin.MockLightPlugin.Company*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: MockPlugin.MockLightPlugin.ModifiedAt
  commentId: P:MockPlugin.MockLightPlugin.ModifiedAt
  id: ModifiedAt
  parent: MockPlugin.MockLightPlugin
  langs:
  - csharp
  - vb
  name: ModifiedAt
  nameWithType: MockLightPlugin.ModifiedAt
  fullName: MockPlugin.MockLightPlugin.ModifiedAt
  type: Property
  source:
    remote:
      path: docfx_project/src-plugins/MockPlugin/MockLightPlugin.cs
      branch: master
      repo: https://github.com/SmartHub-Io/SmartHub-Docs.git
    id: ModifiedAt
    path: src-plugins/MockPlugin/MockLightPlugin.cs
    startLine: 12
  assemblies:
  - MockPlugin
  namespace: MockPlugin
  syntax:
    content: public DateTime ModifiedAt { get; }
    parameters: []
    return:
      type: System.DateTime
    content.vb: Public ReadOnly Property ModifiedAt As Date
  overload: MockPlugin.MockLightPlugin.ModifiedAt*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MockPlugin.MockLightPlugin.CreatedAt
  commentId: P:MockPlugin.MockLightPlugin.CreatedAt
  id: CreatedAt
  parent: MockPlugin.MockLightPlugin
  langs:
  - csharp
  - vb
  name: CreatedAt
  nameWithType: MockLightPlugin.CreatedAt
  fullName: MockPlugin.MockLightPlugin.CreatedAt
  type: Property
  source:
    remote:
      path: docfx_project/src-plugins/MockPlugin/MockLightPlugin.cs
      branch: master
      repo: https://github.com/SmartHub-Io/SmartHub-Docs.git
    id: CreatedAt
    path: src-plugins/MockPlugin/MockLightPlugin.cs
    startLine: 13
  assemblies:
  - MockPlugin
  namespace: MockPlugin
  syntax:
    content: public DateTime CreatedAt { get; }
    parameters: []
    return:
      type: System.DateTime
    content.vb: Public ReadOnly Property CreatedAt As Date
  overload: MockPlugin.MockLightPlugin.CreatedAt*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MockPlugin.MockLightPlugin.MqttSupport
  commentId: P:MockPlugin.MockLightPlugin.MqttSupport
  id: MqttSupport
  parent: MockPlugin.MockLightPlugin
  langs:
  - csharp
  - vb
  name: MqttSupport
  nameWithType: MockLightPlugin.MqttSupport
  fullName: MockPlugin.MockLightPlugin.MqttSupport
  type: Property
  source:
    remote:
      path: docfx_project/src-plugins/MockPlugin/MockLightPlugin.cs
      branch: master
      repo: https://github.com/SmartHub-Io/SmartHub-Docs.git
    id: MqttSupport
    path: src-plugins/MockPlugin/MockLightPlugin.cs
    startLine: 14
  assemblies:
  - MockPlugin
  namespace: MockPlugin
  syntax:
    content: public bool MqttSupport { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property MqttSupport As Boolean
  overload: MockPlugin.MockLightPlugin.MqttSupport*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: MockPlugin.MockLightPlugin.HttpSupport
  commentId: P:MockPlugin.MockLightPlugin.HttpSupport
  id: HttpSupport
  parent: MockPlugin.MockLightPlugin
  langs:
  - csharp
  - vb
  name: HttpSupport
  nameWithType: MockLightPlugin.HttpSupport
  fullName: MockPlugin.MockLightPlugin.HttpSupport
  type: Property
  source:
    remote:
      path: docfx_project/src-plugins/MockPlugin/MockLightPlugin.cs
      branch: master
      repo: https://github.com/SmartHub-Io/SmartHub-Docs.git
    id: HttpSupport
    path: src-plugins/MockPlugin/MockLightPlugin.cs
    startLine: 15
  assemblies:
  - MockPlugin
  namespace: MockPlugin
  syntax:
    content: public bool HttpSupport { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property HttpSupport As Boolean
  overload: MockPlugin.MockLightPlugin.HttpSupport*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: MockPlugin.MockLightPlugin.AssemblyVersion
  commentId: P:MockPlugin.MockLightPlugin.AssemblyVersion
  id: AssemblyVersion
  parent: MockPlugin.MockLightPlugin
  langs:
  - csharp
  - vb
  name: AssemblyVersion
  nameWithType: MockLightPlugin.AssemblyVersion
  fullName: MockPlugin.MockLightPlugin.AssemblyVersion
  type: Property
  source:
    remote:
      path: docfx_project/src-plugins/MockPlugin/MockLightPlugin.cs
      branch: master
      repo: https://github.com/SmartHub-Io/SmartHub-Docs.git
    id: AssemblyVersion
    path: src-plugins/MockPlugin/MockLightPlugin.cs
    startLine: 16
  assemblies:
  - MockPlugin
  namespace: MockPlugin
  syntax:
    content: public double AssemblyVersion { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property AssemblyVersion As Double
  overload: MockPlugin.MockLightPlugin.AssemblyVersion*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MockPlugin.MockLightPlugin.TurnOnOff
  commentId: P:MockPlugin.MockLightPlugin.TurnOnOff
  id: TurnOnOff
  parent: MockPlugin.MockLightPlugin
  langs:
  - csharp
  - vb
  name: TurnOnOff
  nameWithType: MockLightPlugin.TurnOnOff
  fullName: MockPlugin.MockLightPlugin.TurnOnOff
  type: Property
  source:
    remote:
      path: docfx_project/src-plugins/MockPlugin/MockLightPlugin.cs
      branch: master
      repo: https://github.com/SmartHub-Io/SmartHub-Docs.git
    id: TurnOnOff
    path: src-plugins/MockPlugin/MockLightPlugin.cs
    startLine: 17
  assemblies:
  - MockPlugin
  namespace: MockPlugin
  syntax:
    content: public string TurnOnOff { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property TurnOnOff As String
  overload: MockPlugin.MockLightPlugin.TurnOnOff*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: MockPlugin.MockLightPlugin.SetRgba(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:MockPlugin.MockLightPlugin.SetRgba(System.Int32,System.Int32,System.Int32,System.Int32)
  id: SetRgba(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: MockPlugin.MockLightPlugin
  langs:
  - csharp
  - vb
  name: SetRgba(Int32, Int32, Int32, Int32)
  nameWithType: MockLightPlugin.SetRgba(Int32, Int32, Int32, Int32)
  fullName: MockPlugin.MockLightPlugin.SetRgba(System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: docfx_project/src-plugins/MockPlugin/MockLightPlugin.cs
      branch: master
      repo: https://github.com/SmartHub-Io/SmartHub-Docs.git
    id: SetRgba
    path: src-plugins/MockPlugin/MockLightPlugin.cs
    startLine: 37
  assemblies:
  - MockPlugin
  namespace: MockPlugin
  syntax:
    content: public ILight SetRgba(int red, int green, int blue, int alpha)
    parameters:
    - id: red
      type: System.Int32
    - id: green
      type: System.Int32
    - id: blue
      type: System.Int32
    - id: alpha
      type: System.Int32
    return:
      type: ILight
    content.vb: Public Function SetRgba(red As Integer, green As Integer, blue As Integer, alpha As Integer) As ILight
  overload: MockPlugin.MockLightPlugin.SetRgba*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MockPlugin.MockLightPlugin.Build
  commentId: M:MockPlugin.MockLightPlugin.Build
  id: Build
  parent: MockPlugin.MockLightPlugin
  langs:
  - csharp
  - vb
  name: Build()
  nameWithType: MockLightPlugin.Build()
  fullName: MockPlugin.MockLightPlugin.Build()
  type: Method
  source:
    remote:
      path: docfx_project/src-plugins/MockPlugin/MockLightPlugin.cs
      branch: master
      repo: https://github.com/SmartHub-Io/SmartHub-Docs.git
    id: Build
    path: src-plugins/MockPlugin/MockLightPlugin.cs
    startLine: 50
  assemblies:
  - MockPlugin
  namespace: MockPlugin
  syntax:
    content: public string Build()
    return:
      type: System.String
    content.vb: Public Function Build As String
  overload: MockPlugin.MockLightPlugin.Build*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: MockPlugin
  commentId: N:MockPlugin
  name: MockPlugin
  nameWithType: MockPlugin
  fullName: MockPlugin
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MockPlugin.IMockLightPlugin
  commentId: T:MockPlugin.IMockLightPlugin
  parent: MockPlugin
  name: IMockLightPlugin
  nameWithType: IMockLightPlugin
  fullName: MockPlugin.IMockLightPlugin
- uid: IHttpSupport
  commentId: '!:IHttpSupport'
  isExternal: true
  name: IHttpSupport
  nameWithType: IHttpSupport
  fullName: IHttpSupport
- uid: ILight
  isExternal: true
  name: ILight
  nameWithType: ILight
  fullName: ILight
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MockPlugin.MockLightPlugin.Id*
  commentId: Overload:MockPlugin.MockLightPlugin.Id
  name: Id
  nameWithType: MockLightPlugin.Id
  fullName: MockPlugin.MockLightPlugin.Id
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MockPlugin.MockLightPlugin.Name*
  commentId: Overload:MockPlugin.MockLightPlugin.Name
  name: Name
  nameWithType: MockLightPlugin.Name
  fullName: MockPlugin.MockLightPlugin.Name
- uid: MockPlugin.MockLightPlugin.Company*
  commentId: Overload:MockPlugin.MockLightPlugin.Company
  name: Company
  nameWithType: MockLightPlugin.Company
  fullName: MockPlugin.MockLightPlugin.Company
- uid: MockPlugin.MockLightPlugin.ModifiedAt*
  commentId: Overload:MockPlugin.MockLightPlugin.ModifiedAt
  name: ModifiedAt
  nameWithType: MockLightPlugin.ModifiedAt
  fullName: MockPlugin.MockLightPlugin.ModifiedAt
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: MockPlugin.MockLightPlugin.CreatedAt*
  commentId: Overload:MockPlugin.MockLightPlugin.CreatedAt
  name: CreatedAt
  nameWithType: MockLightPlugin.CreatedAt
  fullName: MockPlugin.MockLightPlugin.CreatedAt
- uid: MockPlugin.MockLightPlugin.MqttSupport*
  commentId: Overload:MockPlugin.MockLightPlugin.MqttSupport
  name: MqttSupport
  nameWithType: MockLightPlugin.MqttSupport
  fullName: MockPlugin.MockLightPlugin.MqttSupport
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: MockPlugin.MockLightPlugin.HttpSupport*
  commentId: Overload:MockPlugin.MockLightPlugin.HttpSupport
  name: HttpSupport
  nameWithType: MockLightPlugin.HttpSupport
  fullName: MockPlugin.MockLightPlugin.HttpSupport
- uid: MockPlugin.MockLightPlugin.AssemblyVersion*
  commentId: Overload:MockPlugin.MockLightPlugin.AssemblyVersion
  name: AssemblyVersion
  nameWithType: MockLightPlugin.AssemblyVersion
  fullName: MockPlugin.MockLightPlugin.AssemblyVersion
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: MockPlugin.MockLightPlugin.TurnOnOff*
  commentId: Overload:MockPlugin.MockLightPlugin.TurnOnOff
  name: TurnOnOff
  nameWithType: MockLightPlugin.TurnOnOff
  fullName: MockPlugin.MockLightPlugin.TurnOnOff
- uid: MockPlugin.MockLightPlugin.SetRgba*
  commentId: Overload:MockPlugin.MockLightPlugin.SetRgba
  name: SetRgba
  nameWithType: MockLightPlugin.SetRgba
  fullName: MockPlugin.MockLightPlugin.SetRgba
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: MockPlugin.MockLightPlugin.Build*
  commentId: Overload:MockPlugin.MockLightPlugin.Build
  name: Build
  nameWithType: MockLightPlugin.Build
  fullName: MockPlugin.MockLightPlugin.Build
